Online Store
Example use of REST with Hibernate

Revision History
================
1 - Blaine Mincey(blaine.mincey@redhat.com) - Initial version

Overview
========
This is to be somewhat of a skeleton application that can
be used for many different things.  It implements Hibernate
to access a MySQL database.  From here, a multitude of 
different things can be implemented.  The first is a REST Web
Service. At the moment, Customers is the only table that
has any type of functionality.  WORK IN PROGRESS 

This has been tested on JBoss EAP 5.1.1.

System Requirements
===================
- Maven 2.x or higher
- JDK 1.6.x

Required modifications
======================
Within OnlineStore-Entity, go to the directory src/main/resources.
Here is the onlineStore.sql that can be executed on a MySQL 5.x
database.  First create a database, i.e., OnlineStore.  Then, 
within this newly created database, run the onlineStore.sql script.

Now, within the same directory (src/main/resources) in OnlineStore-Entity, 
edit OnlineStore-mysql-ds.xml.  Modify the security credentials and replace
MY_USERNAME and MY_PASSWORD with the appropriate values.  This file
should be copied to the EAP server config's deploy directory.

The final change to be made is to modify the 'test' version of the
Hibernate config file.  Since it is testing a method outside of a 
container, it uses straight JDBC.  So, within the OnlineStore-Entity, go into
the src/test/resources directory.  Make the same modifications that were
made to the previous hibernate.cfg.xml file.

Build the Application
=====================
To build the application (EAR file), go into the OnlineStore-Parent
directory.  There is only one file here, pom.xml.

From a command line, execute:

mvn clean package

Once built successfully, go into the OnlineStore-EAR/target directory.
There should be an OnlineStore-EAR-1.0.ear file.  This file can now
be copied to your EAP server config's deploy directory.

Test the Application
====================
There are a couple of 'helper' methods to test the successful
deployment of the REST service.  A simple 'hello' is executed via
the following:

http://localhost:8080/OnlineStore-RestService/REST/hello

This will print out the server's current time.

Also, the following URL will echo any string.  For example,
the following URL will echo 'Blaine' and the server time:

http://localhost:8080/OnlineStore-RestService/REST/echo/Blaine

Next, to test the successful deployment of the REST service
along with hibernate, the following will pull XML for the
customer with id of 103:

http://localhost:8080/OnlineStore-RestService/REST/customer/103

Finally, the following will pull back the entire customer list:

http://localhost:8080/OnlineStore-RestService/REST/customers

